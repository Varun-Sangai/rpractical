?help
1:5 + 1:15
a<- c(1,2,4,6,5,3)
b<- c(34,35,23)
result <- array(c(a,b),dim = c(3,3,2))
result
col.names <- c("co1" , "co2" , "co3")
row.names <- c("ro1" , "ro2" , "ro3")
matrix.names <- c("matrix1", "matrix2")
dimnames = list(row.names , col.names , matrix.names)
result
col.names <- c("co1" , "co2" , "co3" , "col4" , "col5")
col.names <- c("co1" , "co2" , "co3" , "col4" , "col5","col6")
row.names <- c("ro1" , "ro2" , "ro3")
dimnames = list(row.names , col.names , matrix.names)
result
rownames = c("row1" ,"row2" , "row3" , "row4")
colnames = c("col1" , "col2" , "col3")
p<- matrix(c(3:14) , nrow = 4 , byrow = TRUE , dimnames = list(rownames , colnames))
print(p)
p<- matrix(c(3:14) , nrow = 4 , byrow = FALSE , dimnames = list(rownames , colnames))
print(p)
(three_d_array <- array(1:24 , ))
(three_d_array <- array(1:24 , dim = c(4,3,2),dimnames = list(c("one" , "two" , "three","four"), c("ein" , "zwel" , "drel"), c("un" , "deux")) ))
three_d_array
a <- c(1,2,3,4,5)
nrow(a)
ncol(a)
NROW(a)
NCOL(a)
p
p<- matrix(c(3:14) , nrow = 4 , byrow = TRUE , dimnames = list(rownames , colnames))
p
rownames(A)
rownames(a)
rownames(p)
colnames(p)
dimnames(p)
rownames(three_d_array)
colnames(three_d_array)
dimnames(three_d_array)
a_llist<-list(1,2,3,4);
print(a_list)
print(a_llist)
names(a_list)<- c("a","b","c","d")
names(a_llist)<- c("a","b","c","d")
print(a_llist)
mainlist<-list()
mainlist<-list(middlelist=list(eleinmidlist=diag(3),innerlist=list(eletoinnerlist=pi^ 1:4,anothereleinnerlist=85)))
mainlist
length(mainlist)
isatomic(list)
isAtomic(list)
atomic(mainlist)
is.atomic(mainlist)
a<-c(1,2,3,4)
NROW(a)
NCOL(a)
NROW(mainlist)
NCOL(mainlist)
mainlist<-list(middlelist=list(eleinmidlist=diag(3),innerlist=list(eletoinnerlist=pi^ 1:4,anothereleinnerlist=85))bottomlist=list(1,2,34))
mainlist<-list(middlelist=list(eleinmidlist=diag(3),innerlist=list(eletoinnerlist=pi^ 1:4,anothereleinnerlist=85)),bottomlist=list(1,2,34))
mainlist
NROW(mainlist)
empid=c(1,2,3,4)
empname=c("darinda","om","vaish","Hai")
noofemp=4
emplist=list("ID"=empid,"Names"=empname,"Total Staff"=noofemp)
emplist
prnit(emplist)
print(emplist)
empname = c("Varun","Snagai","om ka papa hai")
empname
a="om ka papa aksh sharma hai"
a
emplist$Names
print(emplist[[2]])
print(emplist[[2]][2])
print(emplist[[2]][1])
empname=c("darinda varun","om","vaish","Hai")
print(emplist[[2]][1])
emplist=list("ID"=empid,"Names"=empname,"Total Staff"=noofemp)
print(emplist[[2]][1])
print(emplist[[2]][1])
busy_beaver <- c(1,26,21,107)
as.list(busy_beaver)
busy_beaver
as.list(busy_beaver)
as.numeric(busy_beaver)
as.numeric(list(1,2,3,4))
v1<-list("hello","darinde varun")
v1<-as.character(l1)
v1<-as.character(v1)
vl
l1<-as.character(v1)
l1
ac<-list(one=1,two=2,three=3,four=c(2,34,5),five=5)
unlist(ac)
c(list(1,2,3),4)
(a_data_frame) <- data.frame()
(a_data_frame) <- data.frame()
(a_data_frame <- data.frame(
x = letters[1:5]
(a_data_frame <- data.frame(
(a_data_frame <- data.frame()
(a_data_frame) <- data.frame()
clear
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5) ,
z = runif(5) > 0.5
))
str(a_data_frame)
summary(a_data_frame)
y<- rnorm(5)
names(y) <- month.name[1:5]
data_frame()
x = letters[1:5],
y = y ,
z = runif(5) > 0.5
)
data_frame(
x = letters[1:5],
y = y ,
z = runif(5) > 0.5
)
a_data_frame(
x = letters[1:5],
y = y ,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y ,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y ,
z = runif(5) > 0.5
row.names = c("I","AM","MR.","OM","VAISH")
z = runif(5) > 0.5 ,
data.frame(
x = letters[1:5],
y = y ,
z = runif(5) > 0.5,
row.names = c("I","AM","MR.","OM","VAISH")
)
rownames(a_data_frame)
colnames(a_data_frame)
dimnames(a_data_frame)
length(a_data_frame)
a_data_frame[2:3]
a_data_frame[[1]][2:3]
?"mean"
?"+"
?cat()
a <- (1,2,3)
a <- c(1,2,3)
b <- c(11,22,33)
cat(a , " " , b)
print(a , " " , b)
print(a , " " , b)
seq
?seq()
x <- seq(1,10,length.out = 5)
cat(x)
x <- seq(1,10,length.out = 3)
cat(x)
cat(2:7)
cat(x[c(4,1)])
cat(x[c(4,2)])
cat(x[c(1,2)])
ls()
?all.names
ls(all.names(=TRUE))
ls(all.names=TRUE)
?"->>"
?length.out
?"length.out"
z<-c(1,2,44,55,6)
z>4
z[z>4]
which(z>4)
z[which(z>4)]
z[c(TRUE,FALSE)]
z[c(TRUE)]
z[]
z[c(TRUE,FALSE,TRUE)]
y<-[1,2,3,4,5,6,7,8]
y<-c(1,2,3,4,5,6,7,8)
cat([y<2])
cat(c[y<2])
a<-c(8:27)
cat(a)
a[a>15]
a>15
all(a>15)
any(a>15)
sort(v, descending=TRUE)
sort(a, descending=TRUE)
sort(a,descending=TRUE)
sort(a,decreasing=TRUE)
which(a>0)
a<-c(0,1,23,4)
which(a>0)
b<-rep(a,each = 2)
b
b<-rep(a,times = 2)
b
b<-rep(a,times = 1:4)
b
names(a) = c("A","B","C")
a
names(a) = c("A","B","C","D","E")
names(a) = c("A","B","C","D")
a
x = c(1,2,3,4)
y = c(1,2,34,5,6)
x = c(1,2,3,4,5,6,7,8)
y = c(9,10,11,12)
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),C("COL1,"COL2,"COL3","MAT1","MAT2")))
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),c("COL1,"COL2,"COL3"),c("MAT1","MAT2"))
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),c("COL1,"COL2,"COL3"),c("MAT1","MAT2"))
matr = array(c(x,y), dim = c(2,3,2), dimnames = list(c("ROW1","ROW2"),c("COL1","COL2","COL3"),c("MAT1","MAT2"))
)
matr
MAT2
MAT2[,,MAT2]
MAT2[,,"MAT2"]
matr[,,"MAT2"]
matr[,,MAT2]
matr[,,MAT2]
matr["ROW1",,"MAT2"]
matr["ROW1",c(3),"MAT2"]
matr["ROW1",c(2,3),"MAT2"]
matr["ROW1",c(2,3),"MAT1"]
matr["ROW1",c(3),"MAT2"]
matr["ROW1",c(2),"MAT1"]
p = c(1,2,3,4,5,6)
q = c(7,8,9,10,11,12)
matrix_1 = matrix(c(p,q), nrow = 3 )
matrix_1
matrix_1 = matrix(c(p,q), nrow = 3 ,byrow = TRUE )
matrix_1
sum(matrix_!)
sum(matrix_1)
mean(matrix_1)
t(matrix_1)
solve(matrix_1)
matrix_2 = matrix(c(12:20) , nrow = 3 )
cbind(matrix_1 , matrix_2)
rbind(matrix_1 , matrix_2)
ab <- c(1,2,3,4,5,6)
ab-[2,4]
ab[-(2,4)]
ab[-(2:4)]
ab <- c(1,2,3,4)
ab
ab <- r(1,2,3,4)
ab <- c(1,2,3,4)
ab
?c()
?r()
x<seq(1,7, by = 2)
y<-rep((1+x),each = 2)
y
x = seq(1,7, by = 2)
x
m = rbind(x,y)
m
print(m)
clearPushBack()
x = seq(1 , 7, by = 2)
y = rep((1+x) , each = 2)
m = rbind(x,y)
print(m)
r = m[, c(1,2)]
r
a = c(1,2,3,4,5,6)
class(a)
class(1:5)
?integer-class
class(FALSE)
class(5>8)
class("OM")
charToRaw("om" , "vaish")
charToRaw("om")
class(0)
class(0 , 1, 2)
class(1:5)
class(-1.5 : 8.5)
class(-1 : -9)
class(1L)
a[a>5]
b = c(11,2,313,23,1)
a*b
b*a
b = c(11,2,313,23,1,3)
b*a
a*b
a/b
a%%b
a%/%b
4**3
4^2
any(a)
any(b)
all.equal(2,2)
all.equal(7,2)
a %*% b
a %in% b
if(!is(x,"om"))
TRUE
which(a>5)
which(a>2)
all(a>3)
any(a>3)
z = rep(x , each = 2)
z
x
z = rep(a , each = 2)
z
z = rep(a , times = 2)
z
x = c("Om ", "Vaish")
class(x) = "INTEGER"
class(x)
x
class(x) = "integer"
class(x) = "numeric"
x
x = c(1,2,3,4,5)
class(x) = "comples"
class(x) = "complex"
x
class(x) = "integer"
x
class(x)
y = c(1,2,3,4)
class(y)
ls.a
ls
all.names = TRUE
ls
rm
rm()
ls()
matrix_1 = matrix(c(1,2,3,4,5),2,3)
matrix_1 = matrix((c(1,2,3,4,5) , c(2,3,4,5,6)),2,3)
x
y
matrix_1 = matrix(c(x,y) , 3)
matrix_1
names(matrix_1)
matrix_1 = names("ROW 1 , ROW 2 , ROW 3")
names(matrix_1)
matrix_1
matrix_1
names(matrix_1) = ("ROW 1" , "ROW 2" , "ROW 3")
matrix_1 = matrix(c(x,y) , 3)
names(matrix_1) = ("ROW 1" , "ROW 2" , "ROW 3")
threeDim = array(c(x,y) , c(3,3,2))
thrreDim
threeDim = array(c(x,y) , dim = c(3,3,2))
thrreDim
matr = array(c(x,y), dim = c(2,3,2), dimnames = list(c("ROW1","ROW2"),c("COL1","COL2","COL3"),c("MAT1","MAT2"))
)
row.names(matrix_1)
row.names(MAT1)
row.names(matr)
col.names(matr)
col.names(matr)
dim(matr)
rownames(matr)
colnames(matr)
dimnames(matr)
matr[,,"MAT2"]
matr["ROW1",,"MAT2"]
matr["ROW1",'COL1',"MAT2"]
matr[,,"MAT2"]
matr[,"COL1","MAT2"]
install.packages(c("DBI" , "RSQLite"))
install.packages(c("DBI" , "RSQLite"))
search()
library(RMySql)
library(RMySQL)
library(RMySQLite)
v1 = c(10,5,0,23,46)
v2 = c(34,76,0,10,11)
v1 = c(setdiff(v1,v2))
v1
rev(v1)
v2<15
L1 = list(g1 = 1:10 , g2 = "R" , g3 = "Python")
L1.append(L1 , "Java")
L1 = append(L1 , "Java")
names(L1)[4] = "g4"
L1
names(L1) = c("x1" , "x2" , "x3" , "x4")
L1
L1[-3]
L1[[1]][4]
L1[-3]
(a_data_frame = data.frame(x=1:30 , y = NA))
a_data_frame[is.na(a_data_frame)] = 20
a_data_frame
data("trees")
str(trees)
dim(trees)
head(trees,n=10)
summary(trees & Volume)
summary(trees & volume)
summary(trees $ volume)
sum(trees$Girth == 11.0)
# Function to calculate mean
mean_function <- function(x) {
mean(x)
}
# Calculate mean
mean_function(c(1,2,3)) # Output: 2
# Calculate standard deviation
sd_function(c(1,2,3)) # Output: 1
# Calculate standard deviation
sd_function(c(1,2,3)) # Output: 1
# Calculate standard deviation
standard_deviation_function(c(1,2,3)) # Output: 1
stats::sd(x)
# Calculate standard deviation
standard_deviation_function(c(1,2,3)) # Output: 1
# Load devtools package
library(devtools)
abs(-4)
sqrt(2)
square_root<- function(x){
return sqrt(x)
square_root<- function(x){
result <- sqrt(x)
return result
calc_sqrt <- function(x){
return sqrt(x)
calc_ceiling<- function(x){
ceiling(x)
}
square_root<- function(x){
sqrt(x)
}
calc_absolute<- function(x){
abs(x)
}
calc_ceiling<- function(x){
ceiling(x)
}
calc_floor<- function(x){
floor(x)
}
setwd("C:/Users/krishna/Desktop/basic_stats")
calc_absolute(-16)
truncate(c(1,1,2,3,4,4))
truncate(c(1,1,2,3,4,4))
#Setting working directory to where our package is created
setwd("C:/Users/krishna/Desktop/basic_stats")
#loading devtools packages
library(devtools)
#loading all .r files created by me
load_all(".")
#functions call --> testing few functions created
calc_mean(c(1,2,3))
calc_sum(c(1,2,3))
calc_diff(c(4,3))
calc_min(c(12,34,11))
calc_max(c(12,34,11))
square_root(4)
calc_absolute(-16)
truncate(c(1,1,2,3,4,4))
