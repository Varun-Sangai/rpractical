which(a>0)
b<-rep(a,each = 2)
b
b<-rep(a,times = 2)
b
b<-rep(a,times = 1:4)
b
names(a) = c("A","B","C")
a
names(a) = c("A","B","C","D","E")
names(a) = c("A","B","C","D")
a
x = c(1,2,3,4)
y = c(1,2,34,5,6)
x = c(1,2,3,4,5,6,7,8)
y = c(9,10,11,12)
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),C("COL1,"COL2,"COL3","MAT1","MAT2")))
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),c("COL1,"COL2,"COL3"),c("MAT1","MAT2"))
matr = array(c(x,y),dim = c(2,3,2),dimnames = list(c("ROW1","ROW2"),c("COL1,"COL2,"COL3"),c("MAT1","MAT2"))
matr = array(c(x,y), dim = c(2,3,2), dimnames = list(c("ROW1","ROW2"),c("COL1","COL2","COL3"),c("MAT1","MAT2"))
)
matr
MAT2
MAT2[,,MAT2]
MAT2[,,"MAT2"]
matr[,,"MAT2"]
matr[,,MAT2]
matr[,,MAT2]
matr["ROW1",,"MAT2"]
matr["ROW1",c(3),"MAT2"]
matr["ROW1",c(2,3),"MAT2"]
matr["ROW1",c(2,3),"MAT1"]
matr["ROW1",c(3),"MAT2"]
matr["ROW1",c(2),"MAT1"]
p = c(1,2,3,4,5,6)
q = c(7,8,9,10,11,12)
matrix_1 = matrix(c(p,q), nrow = 3 )
matrix_1
matrix_1 = matrix(c(p,q), nrow = 3 ,byrow = TRUE )
matrix_1
sum(matrix_!)
sum(matrix_1)
mean(matrix_1)
t(matrix_1)
solve(matrix_1)
matrix_2 = matrix(c(12:20) , nrow = 3 )
cbind(matrix_1 , matrix_2)
rbind(matrix_1 , matrix_2)
ab <- c(1,2,3,4,5,6)
ab-[2,4]
ab[-(2,4)]
ab[-(2:4)]
ab <- c(1,2,3,4)
ab
ab <- r(1,2,3,4)
ab <- c(1,2,3,4)
ab
?c()
?r()
x<seq(1,7, by = 2)
y<-rep((1+x),each = 2)
y
x = seq(1,7, by = 2)
x
m = rbind(x,y)
m
print(m)
clearPushBack()
x = seq(1 , 7, by = 2)
y = rep((1+x) , each = 2)
m = rbind(x,y)
print(m)
r = m[, c(1,2)]
r
a = c(1,2,3,4,5,6)
class(a)
class(1:5)
?integer-class
class(FALSE)
class(5>8)
class("OM")
charToRaw("om" , "vaish")
charToRaw("om")
class(0)
class(0 , 1, 2)
class(1:5)
class(-1.5 : 8.5)
class(-1 : -9)
class(1L)
a[a>5]
b = c(11,2,313,23,1)
a*b
b*a
b = c(11,2,313,23,1,3)
b*a
a*b
a/b
a%%b
a%/%b
4**3
4^2
any(a)
any(b)
all.equal(2,2)
all.equal(7,2)
a %*% b
a %in% b
if(!is(x,"om"))
TRUE
which(a>5)
which(a>2)
all(a>3)
any(a>3)
z = rep(x , each = 2)
z
x
z = rep(a , each = 2)
z
z = rep(a , times = 2)
z
x = c("Om ", "Vaish")
class(x) = "INTEGER"
class(x)
x
class(x) = "integer"
class(x) = "numeric"
x
x = c(1,2,3,4,5)
class(x) = "comples"
class(x) = "complex"
x
class(x) = "integer"
x
class(x)
y = c(1,2,3,4)
class(y)
ls.a
ls
all.names = TRUE
ls
rm
rm()
ls()
matrix_1 = matrix(c(1,2,3,4,5),2,3)
matrix_1 = matrix((c(1,2,3,4,5) , c(2,3,4,5,6)),2,3)
x
y
matrix_1 = matrix(c(x,y) , 3)
matrix_1
names(matrix_1)
matrix_1 = names("ROW 1 , ROW 2 , ROW 3")
names(matrix_1)
matrix_1
matrix_1
names(matrix_1) = ("ROW 1" , "ROW 2" , "ROW 3")
matrix_1 = matrix(c(x,y) , 3)
names(matrix_1) = ("ROW 1" , "ROW 2" , "ROW 3")
threeDim = array(c(x,y) , c(3,3,2))
thrreDim
threeDim = array(c(x,y) , dim = c(3,3,2))
thrreDim
matr = array(c(x,y), dim = c(2,3,2), dimnames = list(c("ROW1","ROW2"),c("COL1","COL2","COL3"),c("MAT1","MAT2"))
)
row.names(matrix_1)
row.names(MAT1)
row.names(matr)
col.names(matr)
col.names(matr)
dim(matr)
rownames(matr)
colnames(matr)
dimnames(matr)
matr[,,"MAT2"]
matr["ROW1",,"MAT2"]
matr["ROW1",'COL1',"MAT2"]
matr[,,"MAT2"]
matr[,"COL1","MAT2"]
install.packages(c("DBI" , "RSQLite"))
install.packages(c("DBI" , "RSQLite"))
search()
library(RMySql)
library(RMySQL)
library(RMySQLite)
v1 = c(10,5,0,23,46)
v2 = c(34,76,0,10,11)
v1 = c(setdiff(v1,v2))
v1
rev(v1)
v2<15
L1 = list(g1 = 1:10 , g2 = "R" , g3 = "Python")
L1.append(L1 , "Java")
L1 = append(L1 , "Java")
names(L1)[4] = "g4"
L1
names(L1) = c("x1" , "x2" , "x3" , "x4")
L1
L1[-3]
L1[[1]][4]
L1[-3]
(a_data_frame = data.frame(x=1:30 , y = NA))
a_data_frame[is.na(a_data_frame)] = 20
a_data_frame
data("trees")
str(trees)
dim(trees)
head(trees,n=10)
summary(trees & Volume)
summary(trees & volume)
summary(trees $ volume)
sum(trees$Girth == 11.0)
# Function to calculate mean
mean_function <- function(x) {
mean(x)
}
# Calculate mean
mean_function(c(1,2,3)) # Output: 2
# Calculate standard deviation
sd_function(c(1,2,3)) # Output: 1
# Calculate standard deviation
sd_function(c(1,2,3)) # Output: 1
# Calculate standard deviation
standard_deviation_function(c(1,2,3)) # Output: 1
stats::sd(x)
# Calculate standard deviation
standard_deviation_function(c(1,2,3)) # Output: 1
# Load devtools package
library(devtools)
abs(-4)
sqrt(2)
square_root<- function(x){
return sqrt(x)
square_root<- function(x){
result <- sqrt(x)
return result
calc_sqrt <- function(x){
return sqrt(x)
calc_ceiling<- function(x){
ceiling(x)
}
square_root<- function(x){
sqrt(x)
}
calc_absolute<- function(x){
abs(x)
}
calc_ceiling<- function(x){
ceiling(x)
}
calc_floor<- function(x){
floor(x)
}
obama_vs_mccain <- obama_vs_mccain[!is.na(obama_vs_mccain$Turnout), ]
data(obama_vs_mccain, package = "learningr")
data("iris")
summary(iris)
setosa <- setosa[!is.na(setosa$Turnout), ]
# Load the iris dataset
data(iris)
# Display summary statistics for all variables
print(summary(iris))
# Create a subset of iris data for setosa species
setosa <- subset(iris, Species == "setosa")
# Plot a scatter plot for Sepal length and Sepal width for setosa species
plot(setosa$Sepal.Length, setosa$Sepal.Width,
main = "Sepal Length vs Sepal Width for Setosa Species",
xlab = "Sepal Length", ylab = "Sepal Width")
print("Scatter plot created for Sepal length and Sepal width for setosa species.")
# Add main title and axis labels to the scatter plot
title(main = "Sepal Length vs Sepal Width for Setosa Species", xlab = "Sepal Length", ylab = "Sepal Width")
print("Main title and axis labels added to the scatter plot.")
# Plot a histogram for the variable Petal.length
hist(iris$Petal.Length, main = "Histogram of Petal Length", xlab = "Petal Length")
print("Histogram created for the variable Petal.length.")
# Create a subset of iris data for versicolor species
versicolor <- subset(iris, Species == "versicolor")
# Create a boxplot for Petal width of Species=versicolor
boxplot(versicolor$Petal.Width, main = "Boxplot of Petal Width for Versicolor Species",
xlab = "Versicolor Species", ylab = "Petal Width")
print("Boxplot created for Petal width of Species=versicolor.")
# Combine the scatter plot, histogram, and boxplot in one figure
par(mfrow = c(2,2))
# Display the scatter plot
plot(setosa$Sepal.Length, setosa$Sepal.Width,
main = "Sepal Length vs Sepal Width for Setosa Species",
xlab = "Sepal Length", ylab = "Sepal Width")
title(main = "Sepal Length vs Sepal Width for Setosa Species", xlab = "Sepal Length", ylab = "Sepal Width")
print("Scatter plot added to the combined figure.")
# Display the histogram
hist(iris$Petal.Length, main = "Histogram of Petal Length", xlab = "Petal Length")
print("Histogram added to the combined figure.")
# Display the boxplot
boxplot(versicolor$Petal.Width, main = "Boxplot of Petal Width for Versicolor Species",
xlab = "Versicolor Species", ylab = "Petal Width")
print("Boxplot added to the combined figure.")
library(ggplot2)
x <- c(1, 2, 3, 4, 5)
y <- c(10, 15, 12, 18, 20)
data <- data.frame(x, y)
ggplot(data, aes(x, y)) +
geom_point()
categories <- c("A", "B", "C", "D")
values <- c(20, 15, 10, 25)
data <- data.frame(categories, values)
# Create bar chart
ggplot(data, aes(categories, values)) +
geom_bar(stat="identity")
ggplot(data, aes(x, y)) +
geom_line()
x <- c(1, 2, 3, 4, 5)
y <- c(10, 15, 12, 18, 20)
data <- data.frame(x, y)
# Create line graph
ggplot(data, aes(x, y)) +
geom_line()
categories <- c("A", "B", "C", "D")
values <- c(20, 15, 10, 25)
data <- data.frame(categories, values)
# Create pie chart
ggplot(data, aes(x="", y=values, fill=categories)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y")
data <- data.frame(group = rep(c("A", "B"), each = 50), values = c(rnorm(50), rnorm(50, mean = 2)))
# Create boxplot
ggplot(data, aes(x = group, y = values)) +
geom_boxplot()
data <- data.frame(values = rnorm(100))
# Create histogram
ggplot(data, aes(x = values)) +
geom_histogram(binwidth = 0.5)
data <- data.frame(x = 1:10, y = rnorm(10), group = rep(c("Group A", "Group B"), each = 5))
data <- data.frame(x = 1:10, y = rnorm(10), group = rep(c("Group A", "Group B"), each = 5)
)
data <- data.frame(x = 1:10 , y = rnorm(10)),
data <- data.frame(x = 1:10 , y = rnorm(10)
)
data <- data.frame(x = 1:10, y = rnorm(10),
library(ggplot2)
library(ggplot2)
# Create sample data
data <- data.frame(x = 1:10, y = rnorm(10))
# Create plot with titles and labels
ggplot(data, aes(x = x, y = y)) +
geom_point() +
ggtitle("My Plot Title") +
xlab("X-Axis Label") +
ylab("Y-Axis Label")
data <- data.frame(x = 1:10, y = rnorm(10), group = rep(c("Group A", "Group B"), each = 5))
# Create plot with legend
ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
labs(color = "Group") # Add legend title
# Create sample data
data <- data.frame(x = 1:10, y = rnorm(10))
# Create plot with annotation
ggplot(data, aes(x = x, y = y)) +
geom_point() +
annotate("text", x = 5, y = 1, label = "My Annotation", size = 5)
# Create sample data
data <- data.frame(x = 1:10, y = rnorm(10), group = rep(c("Group A", "Group B"), each = 5))
# Create plot with custom colors
ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
scale_color_manual(values = c("Group A" = "red", "Group B" = "blue"))
library(ggplot2)
# create a vector of data
data <- rnorm(1000)
# create a histogram with 20 bins
hist(data, breaks = 20)
# create a vector of data
data <- c(10, 15, 20, 25, 30)
# create a bar plot
barplot(data)
# create x and y vectors
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 25, 30)
# create a line plot
plot(x, y, type = "l")
# create x and y vectors
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 25, 30)
# create a scatter plot
plot(x, y)
# create a vector of data
data <- rnorm(1000)
# create a box plot
boxplot(data)
# create a matrix of data
data <- matrix(rnorm(100), nrow = 10)
# create a heat map
heatmap(data)
# create a plot
plot(x, y)
# change axis labels and title
xlab("Time")
ylab("Sales")
main("Sales over Time")
# create a plot with colored points
plot(x, y, col = "red")
# create a plot with different symbols and styles
plot(x, y, pch = 16, type = "b", col = "blue")
# create a plot with a legend
plot(x, y, col = "red", type = "b", pch = 16)
legend("topright", legend = "Sales", col = "red", pch = 16)
# create a plot with a custom size
png("my_plot.png", width = 800, height = 600)
plot(x, y)
dev.off()
# create a plot with a custom size
png("my_plot.png", width = 800, height = 600)
plot(x, y)
dev.off()
library(RMySQL)
setwd("C:/Users/krishna/Desktop/PRACTICALS/R/QUES 4")
install.packages(RMySQL)
install.packages(MySQL)
setwd("C:/Users/krishna/Desktop/PRACTICALS/R/QUES 3")
#R commands to do the following:
#a. Read the CSV into a data frame object.
mydata <- read.csv("toy_dataset.csv")
#b. Attach the data frame to the environment.
attach(mydata)
#c. Count the number of rows with City = New York City.
sum(City == "New York City")
setwd("C:/Users/krishna/Desktop/PRACTICALS/R/QUES 2")
#a. Display the structure of the dataset.
str(airquality)
#b. Display the number of observations and variables in this dataset.
dim(airquality)
#c. Display the count of complete rows.
complete_rows <- na.omit(airquality)
nrow(complete_rows)
#d. Display the data for the observation having Temp between 70 and 80.
subset(airquality, Temp >= 70 & Temp <= 80)
#e. Display the count of observations where Month = 5.
nrow(subset(airquality, Month == 5))
#f. Display first 10 rows of the dataset.
head(airquality, 10)
#g. Display summary of Wind variable.
summary(airquality$Wind)
#h. Display the complete dataset sorted as per the decreasing order of Temp variable.
airquality[order(airquality$Temp, decreasing = TRUE),]
#i. Add a new observation to this dataset.
new_observation <- c(Ozone = 40, Solar.R = 200, Wind = 10, Temp = 70, Month = 6, Day = 1)
airquality <- rbind(airquality, new_observation)
airquality
setwd("C:/Users/krishna/Desktop/PRACTICALS/R/QUES 1")
# a. Create a numeric, character, integer and logical vector.
numeric_vec <- c(1.2, 3.4, 5.6)
numeric_vec
character_vec <- c("apple", "banana", "cherry")
character_vec
integer_vec <- c(1L, 2L, 3L)
integer_vec
logical_vec <- c(TRUE, FALSE, TRUE)
logical_vec
# b. Create two numeric vectors x and y of different lengths. Next, observe the output of 2*x + y - 3.
x <- c(1, 2, 3)
y <- c(4, 5)
result <- 2*x + y - 3
# b. Create two numeric vectors x and y of different lengths. Next, observe the output of 2*x + y - 3.
x <- c(1, 2, 3)
y <- c(4, 5, 6)
result <- 2*x + y - 3
print(result)
# c. Create a sequence of all the odd numbers between 100 and 500.
odd_seq <- seq(from=101, to=499, by=2)
odd_seq
# d. Calculate the mean and standard deviation of sequence created in part c.
mean_odd_seq <- mean(odd_seq)
sd_odd_seq <- sd(odd_seq)
# e. Create a list containing a vector, an array and a list.
vector1 <- c(1,2,3)
sd_odd_seq
# e. Create a list containing a vector, an array and a list.
vector1 <- c(1,2,3)
array1 <- array(c(1:24), dim=c(2,3,4))
list1 <- list(1:3, "apple", c(TRUE, FALSE, TRUE))
my_list <- list(vector1, array1, list1)
my_list
# f. Create two multiplication compatible matrices M1 and M2 and display their product.
M1 <- matrix(c(1, 2, 3, 4, 5, 6), nrow=2, ncol=3)
M2 <- matrix(c(7, 8, 9, 10, 11, 12), nrow=3, ncol=2)
M_product <- M1 %*% M2
print(M_product)
# g. Display row-wise and column-wise mean of the matrix M1.
row_means <- rowMeans(M1)
col_means <- colMeans(M1)
print(row_means)
print(col_means)
# h. Combine the matrices M1 and M2 (as in previous part) using rbind/cbind function.
combined_r <- rbind(M1, M2)
combined_c <- cbind(M1, M2)
# f. Create two multiplication compatible matrices M1 and M2 and display their product.
M1 <- matrix(c(1, 2, 3, 4, 5, 6), nrow=3, ncol=3)
# f. Create two multiplication compatible matrices M1 and M2 and display their product.
M1 <- matrix(c(1, 2, 3, 4, 5, 6,7,8,9), nrow=3, ncol=3)
M2 <- matrix(c(7, 8, 9, 10, 11, 12,13,14,15), nrow=3, ncol=3)
M_product <- M1 %*% M2
print(M_product)
# g. Display row-wise and column-wise mean of the matrix M1.
row_means <- rowMeans(M1)
col_means <- colMeans(M1)
print(row_means)
print(col_means)
# h. Combine the matrices M1 and M2 (as in previous part) using rbind/cbind function.
combined_r <- rbind(M1, M2)
combined_c <- cbind(M1, M2)
print(combined_r)
print(combined_c)
# i. Convert a 3x4 matrix into 2x4 matrix.
M3 <- M1[1:2, ]
print(M3)
